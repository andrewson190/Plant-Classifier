import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import torchvision.datasets as datasets
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

#30 epochs, 4 layeres

# Model Definition
class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(32 * 12 * 12, 512)
        self.fc2 = nn.Linear(512, 100)  # 100 classes

    def forward(self, x):
        x = nn.functional.relu(self.conv1(x))
        x = nn.functional.max_pool2d(x, kernel_size=2, stride=2)
        x = nn.functional.relu(self.conv2(x))
        x = nn.functional.max_pool2d(x, kernel_size=2, stride=2)
        x = x.view(-1, 32 * 12 * 12)
        x = nn.functional.relu(self.fc1(x))
        x = self.fc2(x)
        return x


def train_and_test(batch_size):
    # Data Preparation
    transform = transforms.Compose([
        transforms.Resize((50, 50)),
        transforms.ToTensor(),
    ])

    train_dataset = datasets.ImageFolder(root="C:/Users/sonan/OneDrive/Documents/GitHub/Machine-Learning-for-Plants/50x50", transform=transform)
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)

    test_dataset = datasets.ImageFolder(root="C:/Users/sonan/OneDrive/Documents/GitHub/Machine-Learning-for-Plants/50x50_test", transform=transform)
    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

    # Model Definition
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')    
    model = CNN().to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    # Training
    num_epochs = 30
    for epoch in range(num_epochs):
        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
        print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {loss.item():.6f}')

    # Testing
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for images, labels in test_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    test_accuracy = (correct / total) * 100
    print(f'Accuracy on test set with batch size {batch_size}: {test_accuracy:.2f}%')

    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    train_accuracy = (correct / total) * 100
    print(f'Accuracy on training set with batch size {batch_size}: {train_accuracy:.2f}%')

    return train_accuracy, test_accuracy

# Define batch sizes to be tested
batch_sizes = [8, 16, 32, 64, 128, 256]

# Train and test the model for each batch size
test_errors = {}
train_errors = {}
for batch_size in batch_sizes:
    train_accuracy, test_accuracy = train_and_test(batch_size)
    test_errors[batch_size] = 100-test_accuracy
    train_errors[batch_size] = 100-train_accuracy



# Plot the accuracies
plt.plot(batch_sizes, list(train_errors.values()), marker='o', label='Train Accuracy', color = 'blue')
plt.plot(batch_sizes, list(test_errors.values()), marker='o', label='Test Accuracy', color = 'orange')
plt.title('Batch Size vs Error Rate')
plt.xlabel('Batch Size')
plt.ylabel('Error Rate (%)')
plt.xticks(batch_sizes)
plt.legend()
plt.ylim(0, 35)
plt.grid(True)
plt.show()